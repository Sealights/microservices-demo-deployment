
name: Execute e2e tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  ECR_URL: ${{ secrets.ECR_URL }}
  LOGZIO_TOKEN: ${{ secrets.LOGZIO_TOKEN }}
  LOGZIO_LISTENER_ADDRESS: ${{ secrets.LOGZIO_LISTENER_ADDRESS }}
  #K3S_MAX_RETRY_COUNT: ${{ secrets.K3S_MAX_RETRY_COUNT }}
  K3S_MAX_RETRY_COUNT: 10
  SLEEP_DURATION: 10
  BUILD_ID : build-${{ github.run_id }}-${{ github.run_attempt }}
  SL_LAB_ID: "integ_master_813e_SLBoutique"
  SL_LAB_API_TOKEN: ${{ secrets.RM_DEV_SL_TOKEN }}
  SL_LAB_URI: https://dev-risk-management.dev.sealights.co/sl-api/v1/agent-apis/lab-ids/integ_master_813e_SLBoutique/integration-build
  
jobs:
  trigger_e2e_tests:
    runs-on: ubuntu-latest
    steps:         
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Trigger merge
        run: | 
              curl -H "Accept: application/vnd.github.everest-preview+json" -H "Authorization: token $GITHUB_TOKEN" --request POST --data '{"event_type": "manual-trigger-mytest", "client_payload": { "myKey": "myValue" } }' https://api.github.com/Sealights/microservices-demo-deployment/dispatches 
                            
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
                
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_US_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_US_SECRET_ACCESS_KEY }}
          #aws-region: eu-west-1
          aws-region: us-east-2
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - uses: actions/checkout@v3
      
      - name: Set up k3s
        uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: 'latest' 
          
      - name: Deploy services
        run: |
          kubectl create secret docker-registry aws-secret --docker-server=$ECR_URL --docker-username=AWS --docker-password=$(aws ecr get-login-password)
          kubectl create namespace monitoring
          kubectl create secret generic logzio-logs-secret --from-literal=logzio-log-shipping-token=$LOGZIO_TOKEN --from-literal=logzio-log-listener=$LOGZIO_LISTENER_ADDRESS -n monitoring
          kubectl apply -f https://raw.githubusercontent.com/logzio/logzio-k8s/master/logzio-daemonset-containerd.yaml -f https://raw.githubusercontent.com/logzio/logzio-k8s/master/configmap.yaml
          kubectl apply -R -f ./k3s/                      
          
      - name: Wait for fetching containers
        run: |
          chmod +rx ./k3s-deployment/wait-for-pods-statuses.sh          
          ./k3s-deployment/wait-for-pods-statuses.sh $K3S_MAX_RETRY_COUNT $SLEEP_DURATION
          
      - name: Wait for pods
        run: |
          chmod +rx ./k3s-deployment/wait-for-pods-phases.sh          
          ./k3s-deployment/wait-for-pods-phases.sh $K3S_MAX_RETRY_COUNT $SLEEP_DURATION
          
      - name: Fetch deployment repo
        run: |             
             export GITHUB_TOKEN=
             echo $GITHUB_TOKEN >> token.txt
             git clone https://$GITHUB_TOKEN@github.com/Sealights/microservices-demo-tests.git tests
             git remote set-url origin https://$GITHUB_TOKEN@github.com/Sealights/microservices-demo-tests.git
             
      - name: List monitoring pods
        run: kubectl get pods --namespace=monitoring
        
      - name: Install testing tools     
        run: |             
             cd tests             
             npm install            
             
      - name: Wait for external IPs
        run: |           
            chmod +rx ./k3s-deployment/wait-for-external-ip.sh        
            ./k3s-deployment/wait-for-external-ip.sh $K3S_MAX_RETRY_COUNT $SLEEP_DURATION
            
            kubectl get svc
               
      - name: Test Frontend availability
        run: |
             export BOUTIQUE_FRONTEND_IP=$(cat test-entrypoint.txt)             
             ping $BOUTIQUE_FRONTEND_IP -c 5                     
               
      - name: Report build number  
        uses: satak/webrequest-action@master
        with:
          url: ${{ env.SL_LAB_URI }}
          method: POST
          payload: '{"buildName": "${{ env.BUILD_ID }}"}'
          headers: '{"Content-Type": "application/json", "Authorization": "Bearer ${{ env.SL_LAB_API_TOKEN }}"}'                
                   
      - name: Run e2e tests     
        run: |
             echo "Build id: $BUILD_ID"
             export BOUTIQUE_FRONTEND_IP=$(cat test-entrypoint.txt)                          
             echo "TEST: $BOUTIQUE_FRONTEND_IP"
             export TEST_ENDPOINT=http://$BOUTIQUE_FRONTEND_IP:80
             echo "Test entry point: $TEST_ENDPOINT"
             
             kubectl get services
             kubectl get pods
                                     
             cd tests             
             
             ./node_modules/.bin/slnodejs mocha --token $SL_LAB_API_TOKEN --labId $SL_LAB_ID --failbuild true --teststage "E2E Tets" --useslnode2 -- --recursive mocha/ --timeout=10000
             sleep 20
             
      #- name: Merge PR
#        uses: "actions/github-script@v5"
#        with:
#          github-token: "${{ secrets.GH_PAT }}"
#          script: |
#            const pullRequest = context.payload.workflow_run.pull_requests[0]
#            const repository = context.repo
#
#            await github.rest.pulls.merge({
#              merge_method: "merge",
#              owner: repository.owner,
#              pull_number: pullRequest.number,
#              repo: repository.repo,
#            })
            
      #- name: Merge PR
      #  uses: ridedott/merge-me-action@v2
      #  with:
      #    GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          
      - name: Get logs
        if: always()
        run: | 
             kubectl logs deployment/sl-boutique-paymentservice
             
  auto-merge-pull-request:
      needs: trigger_e2e_tests
      runs-on: ubuntu-latest

      #if: >
      #  github.event_name == 'pull_request'
      
      steps:     
        - name: Test
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}            
          run: |

            echo "$GITHUB_CONTEXT"
            
            #echo context.repo

#        - name: "Merge pull request"
#          uses: reitermarkus/automerge@v2
#          with:
#            token: ${{ secrets.MY_GITHUB_TOKEN }}
#            merge-method: rebase
#            do-not-merge-labels: never-merge
#            required-labels: automerge
#            pull-request: ${{ github.event.inputs.pull-request }}
#            dry-run: true
          
        - name: Merge pull request
          env:
            
            GH_TOKEN: ${{ secrets.GH_PAT }}
          run: |
             export PR_NUMBER="${{ github.event.number }}"
             export EVENT_TYPE="${{ github.event_name }}"
            
             echo "Pull request number: $PR_NUMBER, event type: $EVENT_TYPE"
            
             export PR_LINK="${{ github.event.pull_request.self }}"
             echo "PR link: $PR_LINK"
             echo ${GH_TOKEN} >> token.txt
             export GITHUB_TOKEN=
             export GH_TOKEN=
             gh auth login --with-token < token.txt
             #gh pr merge --merge "$PR_LINK"
              
            #curl -X PUT -H "Accept: application/vnd.github.v3+json" -H "Authorization: token <TOKEN>" "$PR_LINK/merge"
          

          
        #- name: "Merge pull request"
#          uses: "actions/github-script@v5"
#          with:
#            github-token: "${{ secrets.GH_PAT }}"            
#            script: |
#              #const pullRequest = context.payload.workflow_run.pull_requests[0]
#              const repository = context.repo
#              const { owner, repo } = context.repo
#              console.log(`The owner of ${repo} is ${owner}`)
              
#              await github.rest.pulls.merge({
#                merge_method: "merge",
#                owner: repository.owner,
#                pull_number: "${{ github.event.number }}",
#                repo: repository.repo,
 #             })

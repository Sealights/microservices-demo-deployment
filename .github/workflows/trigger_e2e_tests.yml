
name: Execute e2e tests
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  K3S_MAX_RETRY_COUNT: ${{ secrets.K3S_MAX_RETRY_COUNT }}
  #GITHUB_USERNAME: ${{ secrets.GH_USER_NAME }}
  #GITHUB_USER_EMAIL: ${{ secrets.GH_USER_EMAIL }}
  
jobs:
  trigger_e2e_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - uses: actions/checkout@v3
      
      - name: Set up k3s
        #uses: nolar/setup-k3d-k3s@v1
        #with:
        #  github-token: ${{ secrets.GH_PAT }}
        #  k3d-name: sl-boutique
        uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: 'latest' 
          
      #- name: Test ECR        
      #  env:
      #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #    ECR_REPOSITORY: microservices-demo-adservice
      #    IMAGE_TAG: latest
      #  run: |
      #    echo $ECR_REGISTRY
      #    echo $ECR_REPOSITORY
      #    docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Deploy services
        run: |
          kubectl create secret docker-registry aws-secret --docker-server=159616352881.dkr.ecr.eu-west-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password)          
          kubectl apply -R -f ./k3s/                      
          
      - name: Waiting for fetching containers
        run: |
          chmod +rx wait-for-pods-statuses.sh          
          ./wait-for-pods-statuses.sh $K3S_MAX_RETRY_COUNT, 10
          
      - name: Waiting for pods to be ready
        run: |
          chmod +rx wait-for-pods-phases.sh          
          ./wait-for-pods-phases.sh $K3S_MAX_RETRY_COUNT, 10
          
      - name: Deployment repo fetch     
        run: |             
             #git config --global user.name $GITHUB_USERNAME
             #git config --global user.email $GITHUB_USER_EMAIL
             export GITHUB_TOKEN=
             echo $GITHUB_TOKEN >> token.txt
             #gh auth login --with-token < token.txt
             git clone https://$GITHUB_TOKEN@github.com/Sealights/microservices-demo-tests.git tests
             git remote set-url origin https://$GITHUB_TOKEN@github.com/Sealights/microservices-demo-tests.git
             
      - name: Install npm     
        run: |             
             cd tests             
             npm install
             
      - name: Waiting for external IPs
        run: |             
             iterator=1
             
             while [ $iterator -le $K3S_MAX_RETRY_COUNT ] 
             do
               loadBnalancerStatus=`kubectl get svc sl-boutique-frontend -o json| jq -r .status.loadBalancer`
                             
               if [ ! "$loadBnalancerStatus" == "{}" ]; then
                 echo "$loadBnalancerStatus" > loadBnalancerStatus.json
                 export BOUTIQUE_FRONTEND_IP=`jq -r .ingress[].ip loadBnalancerStatus.json`
                 
                 if [ ! -z "$BOUTIQUE_FRONTEND_IP" ]                 
                   break
                 fi               
               fi
                        
               iterator=$((iterator+1))
               sleep 10
             done
             
             echo "Frontend IP: $BOUTIQUE_FRONTEND_IP"
             #echo "$BOUTIQUE_FRONTEND_IP"
                        
      - name: Run e2e tests     
        run: |               
             #while [ $counter -le 10 ]
             #do
             #  echo $counter
             #  ((counter++))
             #done
             
             export BOUTIQUE_FRONTEND_IP=`kubectl get svc sl-boutique-frontend -o json| jq -r .status.loadBalancer.ingress[].ip`         
             echo $BOUTIQUE_FRONTEND_IP
             export TEST_ENDPOINT=http://$BOUTIQUE_FRONTEND_IP:8080
             echo $TEST_ENDPOINT
             kubectl get svc
             kubectl get pods
             
             #ping $BOUTIQUE_FRONTEND_IP -c 5
             wget $TEST_ENDPOINT -t 1     
             echo `cat index.html'
             
             cd tests
             npm run test
